;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname q1) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require racket/string)
(require "extras.rkt")



(check-location "02" "q1.rkt")


;; You are to write a file called q1.rkt that defines a Lexer data type

;; Lexer is defined as a struct (token input)
;; with the following fields :
;; token : String (any String will do) defines the token of the Lexer.
;; input : String (any String will do) defines the input of the Lexer.

;; IMPLEMENTATION:
(define-struct lexer (token input))

;; CONSTRUCTOR TEMPLATE:
;; (make-lexer String String)

;; OBSERVER TEMPLATE:
(define (lexer-fn l)
  (... (lexer-token l)
       (lexer-input l)))

;; make-lexer : String String -> Lexer
;; GIVEN: two strings s1 and s2
;; RETURNS: a Lexer whose token string is s1
;;     and whose input string is s2
;; DESIGN STRATEGY : use constructor template.

(define (make-Lexer token input)
  (make-lexer token input))

;; lexer-token : Lexer -> String
;; GIVEN: a Lexer
;; RETURNS: its token string
;; EXAMPLE:
;;     (lexer-token (make-lexer "abc" "1234")) =>  "abc"
;; DESIGN STRATEGY : implement observer template.

(define (lexer-token l)
  (lexer-token l))


;; lexer-input : Lexer -> String
;; GIVEN: a Lexer
;; RETURNS: its input string
;; EXAMPLE:
;;     (lexer-input (make-lexer "abc" "1234")) =>  "1234"
;; DESIGN STRATEGY : implement observer template.

(define (lexer-input l)
  (lexer-input l))

;; initial-lexer : String -> Lexer
;; GIVEN: an arbitrary string
;; RETURNS: a Lexer lex whose token string is empty
;;     and whose input string is the given string
;; DESIGN STRATEGY :

(define(initial-lexer str)
  (make-lexer "" str))



;; lexer-stuck? : Lexer -> Boolean
;; GIVEN: a Lexer
;; RETURNS: false if and only if the given Lexer's input string
;;     is non-empty and begins with an English letter or digit;
;;     otherwise returns true.
;; EXAMPLES:
;;     (lexer-stuck? (make-lexer "abc" "1234"))  =>  false
;;     (lexer-stuck? (make-lexer "abc" "+1234"))  =>  true
;;     (lexer-stuck? (make-lexer "abc" ""))  =>  true

(define (input-empty? str)
  (not (non-empty-string? str)))

(define (first-character str)
  (string-ith str 0))

(define (letter-digit? str)
  (and (char-alphabetic? (first-character str))
  (char-numeric? (first-character str))))


(define (lexer-stuck l)
  (and (not (input-empty? (lexer-input l)))
       (letter-digit? (lexer-input l))))



;; lexer-shift : Lexer -> Lexer
;; GIVEN: a Lexer
;; RETURNS:
;;   If the given Lexer is stuck, returns the given Lexer.
;;   If the given Lexer is not stuck, then the token string
;;       of the result consists of the characters of the given
;;       Lexer's token string followed by the first character
;;       of that Lexer's input string, and the input string
;;       of the result consists of all but the first character
;;       of the given Lexer's input string.
;; EXAMPLES:
;;     (lexer-shift (make-lexer "abc" ""))
;;         =>  (make-lexer "abc" "")
;;     (lexer-shift (make-lexer "abc" "+1234"))
;;         =>  (make-lexer "abc" "+1234")
;;     (lexer-shift (make-lexer "abc" "1234"))
;;         =>  (make-lexer "abc1" "234")

(define (input-first-letter-append str1 str2)
  (string-append str1 (string-ith str2 0)))


(define (all-but-first str)
  (substring str 1 (string-length str)))

(define(move-letter l)
  (make-lexer (input-first-letter-append (lexer-token l) (lexer-input l))
              (all-but-first (lexer-input l)))
  
(define (lexer-shift l)
  (cond[(lexer-stuck? l) l]
       [else (move-letter l)]))



;; lexer-reset : Lexer -> Lexer
;; GIVEN: a Lexer
;; RETURNS: a Lexer whose token string is empty and whose
;;     input string is empty if the given Lexer's input string
;;     is empty and otherwise consists of all but the first
;;     character of the given Lexer's input string.
;; EXAMPLES:
;;     (lexer-reset (make-lexer "abc" ""))
;;         =>  (make-lexer "" "")
;;     (lexer-reset (make-lexer "abc" "+1234"))
;;         =>  (make-lexer "" "1234")

(define (reset-input str)
  (cond[(not (non-empty-string? str)) ""]
       [else (all-but-first str)]))
  
(define (lexer-reset l)
  (make-lexer "" (reset-input (lexer-input l))))

  

